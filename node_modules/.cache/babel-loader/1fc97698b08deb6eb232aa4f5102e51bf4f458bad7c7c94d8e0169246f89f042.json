{"ast":null,"code":"var _jsxFileName = \"/Users/ismaelnvo/Desktop/hotelReservation/hotel-reservation/src/components/ContexApplication.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\n// const CheckFrecuency = (numbers:number[]):Map<number, number>=>{\n//     return numbers.reduce((freq, value)=>{\n//         freq.set(value, (freq.get(value)|| 0 ) + 1);\n//         return freq;\n//     }, new Map<number,number>);  \n// }\nconst BookingContext = /*#__PURE__*/createContext(undefined);\n//Proveedor del contexto \nexport const BookingProvider = ({\n  children\n}) => {\n  _s();\n  const inicialRoom = new Map();\n  inicialRoom.set(1, {\n    adultCount: 1,\n    child: {\n      childCount: 0\n    }\n  });\n  const [bookingData, setBookingData] = useState({\n    date: {\n      checkIn: new Date(),\n      checkOut: new Date()\n    },\n    rooms: inicialRoom\n  });\n  const handleAddNewRoom = () => {\n    //creamos un objeto con el identificador newRom de interface room, le asignamos sus correspondientes valores\n    const newRoom = {\n      adultCount: 1,\n      child: {\n        childCount: 0\n      }\n    };\n    //Hacemos una copia del estado anterior de rooms\n    const updateRooms = new Map(bookingData.rooms);\n    // Incertamos new room que acabamos de crear, con el parametro number igual al \n    // estado rooms anterior le asignamos el valor rooms.size()\n    updateRooms.set(bookingData.rooms.size + 1, newRoom);\n    //Llamamos la funcion actuaciona, hacemos una copia del estado anterior, y modificamos el estado anterior de rooms\n    //con los cambios anteriores realizados.\n    setBookingData(prev => ({\n      ...prev,\n      rooms: updateRooms\n    }));\n  };\n  const getAges = (currentAges, newChildrenCount) => {\n    if (newChildrenCount > currentAges.length) {\n      return [...currentAges, ...Array(newChildrenCount - currentAges.length).fill(\"\")];\n    } else if (newChildrenCount < currentAges.length) {\n      return currentAges.slice(0, newChildrenCount);\n    }\n    return currentAges;\n  };\n  const handleDeleteRoom = index => {\n    setBookingData(prev => {\n      const updateRooms = new Map(prev.rooms);\n      updateRooms.delete(index); // room siempre es true ya que el botton delete siempre se mostrara cu\n      return {\n        ...prev,\n        rooms: updateRooms\n      };\n    });\n  };\n  const handleDataUser = guestData => {\n    setBookingData(prev => ({\n      ...prev,\n      guest: guestData\n    }));\n  };\n  const handleDateUpdate = (field, e) => {\n    const newDate = new Date(e.target.value);\n    setBookingData(prev => ({\n      ...prev,\n      date: {\n        ...prev.date,\n        [field]: newDate\n      }\n    }));\n  };\n  const handleAgesChanges = (roomIndex, childrenIndex, value) => {\n    setBookingData(prev => {\n      const newRooms = new Map(prev.rooms);\n      const roomToUpdate = newRooms.get(roomIndex);\n      if (roomToUpdate) {\n        var _roomToUpdate$child$a;\n        const updatedChild = {\n          ...roomToUpdate.child,\n          ages: (_roomToUpdate$child$a = roomToUpdate.child.ages) === null || _roomToUpdate$child$a === void 0 ? void 0 : _roomToUpdate$child$a.map((age, index) => index === childrenIndex ? value : age)\n        };\n        const updatedRoom = {\n          ...roomToUpdate,\n          child: updatedChild\n        };\n        newRooms.set(roomIndex, updatedRoom);\n      }\n      return {\n        ...prev,\n        rooms: newRooms\n      };\n    });\n  };\n  const childrenQuantityDecrement = index => {\n    setBookingData(prev => {\n      const newRooms = new Map(prev.rooms);\n      const roomToUpdate = newRooms.get(index);\n      if (roomToUpdate && roomToUpdate.child.childCount > 0) {\n        const updateRoom = {\n          ...roomToUpdate,\n          child: {\n            ...roomToUpdate.child,\n            childCount: roomToUpdate.child.childCount - 1\n          }\n        };\n        newRooms.set(index, updateRoom);\n      }\n      return {\n        ...prev,\n        rooms: newRooms\n      };\n    });\n  };\n  const childrenQuantityIncrement = index => {\n    setBookingData(prev => {\n      const newRooms = new Map(prev.rooms);\n      const roomToUpdate = newRooms.get(index);\n      if (roomToUpdate) {\n        const updatedRoom = {\n          ...roomToUpdate,\n          child: {\n            ...roomToUpdate.child,\n            childCount: roomToUpdate.child.childCount + 1\n          }\n        };\n        newRooms.set(index, updatedRoom);\n      }\n      return {\n        ...prev,\n        rooms: newRooms\n      };\n    });\n  };\n  const adultQuantityDecrement = index => {\n    setBookingData(prev => {\n      const newRooms = new Map(prev.rooms);\n      const roomToUpdate = newRooms.get(index);\n      if (roomToUpdate && roomToUpdate.adultCount > 1) {\n        const updateRoom = {\n          ...roomToUpdate,\n          adultCount: roomToUpdate.adultCount - 1\n        };\n        newRooms.set(index, updateRoom);\n      }\n      return {\n        ...prev,\n        rooms: newRooms\n      };\n    });\n  };\n  const adultQuantityIncrement = index => {\n    setBookingData(prev => {\n      const newRooms = new Map(prev.rooms);\n      const roomToUpdate = newRooms.get(index);\n      if (roomToUpdate) {\n        const updateRoom = {\n          ...roomToUpdate,\n          adultCount: roomToUpdate.adultCount + 1\n        };\n        newRooms.set(index, updateRoom);\n      }\n      return {\n        ...prev,\n        rooms: newRooms\n      };\n    });\n  };\n  const checkAges = () => {\n    for (const room of Array.from(bookingData.rooms.values())) {\n      let index = 0;\n      for (const value of room.child.ages) {\n        if (value === \"\" || value === `--Select child ${index + 1} Age--`) {\n          return false;\n        }\n        index++;\n      }\n    }\n    return true;\n  };\n  const handleAgeByIndex = (roomIndex, value) => {\n    const roomsUpdate = new Map(bookingData.rooms);\n    const roomToUpdate = roomsUpdate.get(roomIndex);\n    if (roomToUpdate) {\n      roomToUpdate.child.ages = value;\n    }\n    return roomsUpdate;\n  };\n  const updateAgesLenght = (index, newLength) => {\n    const updateRooms = new Map(bookingData.rooms);\n    const room = updateRooms.get(index);\n    if (room && room.child.childCount > 0) {\n      room.child.ages = Array(newLength).fill(\" \");\n      updateRooms.set(index, room);\n      setBookingData({\n        ...bookingData,\n        rooms: updateRooms\n      });\n    }\n  };\n  const handleAgesChange = (roomIndex, newAges) => {\n    const updateRooms = new Map(bookingData.rooms);\n    const room = updateRooms.get(roomIndex);\n    if (room && room.child.childCount > 0) {\n      room.child.ages = newAges;\n      updateRooms.set(roomIndex, room);\n      setBookingData({\n        ...bookingData,\n        rooms: updateRooms\n      });\n    }\n  };\n  const calculateSum = key => {\n    return Array.from(bookingData.rooms.values()).reduce((sum, room) => {\n      if (key === 'adultCount') {\n        return sum + room.adultCount;\n      } else if (key === 'childCount') {\n        return sum + room.child.childCount;\n      }\n      return sum;\n    }, 0);\n  };\n  const getGuestInfo = input => {\n    if (input !== 'stat' && input !== 'sum') {\n      throw new Error(\"Input must be 'stat' or 'sum'\");\n    }\n    const adultSum = calculateSum('adultCount');\n    const childSum = calculateSum('childCount');\n    const roomsSum = bookingData.rooms.size;\n    if (input === 'stat') {\n      const adultTitle = adultSum > 1 ? 'adults' : 'adult';\n      const childTitle = childSum > 1 ? 'children' : 'child';\n      const roomTitle = roomsSum > 1 ? 'rooms' : 'room';\n      const StatGuestFormatted = childSum === 0 ? `${adultTitle} ${adultSum}, ${roomTitle}  ${roomsSum}` : `${adultTitle} ${adultSum}, ${childTitle} ${childSum}, ${roomTitle} ${roomsSum}`;\n      return StatGuestFormatted;\n    } else if (input === 'sum') {\n      return adultSum + childSum;\n    }\n    return 0;\n  };\n  const updateAges = useCallback((roomIndex, childrenCount) => {\n    setBookingData(prev => {\n      const newRooms = new Map(prev.rooms);\n      const roomToUpdate = newRooms.get(roomIndex);\n      if (roomToUpdate) {\n        const currentAges = roomToUpdate.child.ages || [];\n        const updatedAges = [...currentAges];\n        // Asegurarse de que el tamaño del array de edades coincida con childrenCount\n        while (updatedAges.length < childrenCount) {\n          updatedAges.push(\"\");\n        }\n        // Si el número de niños disminuye, ajustar el array de edades\n        if (updatedAges.length > childrenCount) {\n          updatedAges.splice(childrenCount);\n        }\n        const updatedChild = {\n          ...roomToUpdate.child,\n          ages: updatedAges\n        };\n        const updatedRoom = {\n          ...roomToUpdate,\n          child: updatedChild\n        };\n        newRooms.set(roomIndex, updatedRoom);\n      }\n      return {\n        ...prev,\n        rooms: newRooms\n      };\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(BookingContext.Provider, {\n    value: {\n      bookingData,\n      setBookingData,\n      handleAddNewRoom,\n      handleDeleteRoom,\n      handleAgesChange,\n      updateAgesLenght,\n      handleAgeByIndex,\n      handleDateUpdate,\n      getAges,\n      getGuestInfo,\n      handleDataUser,\n      checkAges,\n      childrenQuantityDecrement,\n      childrenQuantityIncrement,\n      adultQuantityDecrement,\n      adultQuantityIncrement,\n      handleAgesChanges,\n      updateAges\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 307,\n    columnNumber: 9\n  }, this);\n};\n_s(BookingProvider, \"bcWNvlRaGvbLwy73VOl8qCGPINg=\");\n_c = BookingProvider;\nexport const useBookingContext = () => {\n  _s2();\n  const context = useContext(BookingContext);\n  if (context === undefined) {\n    throw new Error('useBookingContext must be used within a BookingProvider');\n  }\n  return context;\n};\n_s2(useBookingContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"BookingProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useCallback","jsxDEV","_jsxDEV","BookingContext","undefined","BookingProvider","children","_s","inicialRoom","Map","set","adultCount","child","childCount","bookingData","setBookingData","date","checkIn","Date","checkOut","rooms","handleAddNewRoom","newRoom","updateRooms","size","prev","getAges","currentAges","newChildrenCount","length","Array","fill","slice","handleDeleteRoom","index","delete","handleDataUser","guestData","guest","handleDateUpdate","field","e","newDate","target","value","handleAgesChanges","roomIndex","childrenIndex","newRooms","roomToUpdate","get","_roomToUpdate$child$a","updatedChild","ages","map","age","updatedRoom","childrenQuantityDecrement","updateRoom","childrenQuantityIncrement","adultQuantityDecrement","adultQuantityIncrement","checkAges","room","from","values","handleAgeByIndex","roomsUpdate","updateAgesLenght","newLength","handleAgesChange","newAges","calculateSum","key","reduce","sum","getGuestInfo","input","Error","adultSum","childSum","roomsSum","adultTitle","childTitle","roomTitle","StatGuestFormatted","updateAges","childrenCount","updatedAges","push","splice","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useBookingContext","_s2","context","$RefreshReg$"],"sources":["/Users/ismaelnvo/Desktop/hotelReservation/hotel-reservation/src/components/ContexApplication.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, useCallback } from \"react\";\nimport { resevationData } from \"../interfaces/ReservationData\";\nimport { Room }  from  \"../interfaces/Room\";\nimport { date }  from  \"../interfaces/BookedDate\";\nimport { guest } from  \"../interfaces/guest\";\ntype field = \"adultCount\" | \"childCount\";\ninterface BookingContextProps {\n    bookingData: resevationData;\n    setBookingData: React.Dispatch<React.SetStateAction<resevationData>>;\n    handleAddNewRoom: () => void;\n    handleDeleteRoom: (index: number) => void;\n    //handleGuestCountChange: (field: field, index: number, value: number) => void;\n    handleAgesChange: (roomIndex: number, newAges: string[]) => void;\n    updateAgesLenght: (index: number, newLength: number) => void;\n    handleAgeByIndex: (roomIndex: number, value: string[]) => Map<number, Room>;\n    getAges: (currentAges: string[], newChildrenCount: number) => string[];\n    handleDateUpdate: (field: keyof date, e: React.ChangeEvent<HTMLInputElement>) => void;\n    getGuestInfo: (input: string) => string | number;\n    handleDataUser: (guestData: guest) => void;\n    checkAges: () => boolean;\n    childrenQuantityIncrement: (index: number) => void;\n    childrenQuantityDecrement: (index: number) => void;\n    adultQuantityIncrement: (index: number) => void;\n    adultQuantityDecrement: (index: number) => void;\n    handleAgesChanges:(roomIndex: number, childrenIndex: number, value: number)=>void;\n    updateAges:(roomIndex: number, childrenCount: number)=>void;\n};\n\ninterface bookingProviderProps {\n    children: React.ReactNode;\n}\n// const CheckFrecuency = (numbers:number[]):Map<number, number>=>{\n//     return numbers.reduce((freq, value)=>{\n//         freq.set(value, (freq.get(value)|| 0 ) + 1);\n//         return freq;\n//     }, new Map<number,number>);  \n// }\nconst BookingContext = createContext<BookingContextProps | undefined>(undefined);\n//Proveedor del contexto \nexport const BookingProvider: React.FC<bookingProviderProps> = ({ children }) => {\n    const inicialRoom = new Map<number, Room>();\n    inicialRoom.set(1, { adultCount: 1, child: { childCount: 0} });\n    const [bookingData, setBookingData] = useState<resevationData>({\n        date: { checkIn: new Date(), checkOut: new Date() },\n        rooms: inicialRoom\n    });\n    const handleAddNewRoom = () => {\n        //creamos un objeto con el identificador newRom de interface room, le asignamos sus correspondientes valores\n        const newRoom: Room = {\n            adultCount: 1,\n            child: { childCount: 0}\n        }\n        //Hacemos una copia del estado anterior de rooms\n        const updateRooms = new Map(bookingData.rooms);\n        // Incertamos new room que acabamos de crear, con el parametro number igual al \n        // estado rooms anterior le asignamos el valor rooms.size()\n        updateRooms.set(bookingData.rooms.size + 1, newRoom);\n        //Llamamos la funcion actuaciona, hacemos una copia del estado anterior, y modificamos el estado anterior de rooms\n        //con los cambios anteriores realizados.\n        setBookingData(prev => ({\n            ...prev,\n            rooms: updateRooms\n        }))\n    }\n    const getAges = (currentAges: string[], newChildrenCount: number): string[] => {\n        if (newChildrenCount > currentAges.length) {\n            return [...currentAges, ...Array(newChildrenCount - currentAges.length).fill(\"\")];\n        } else if (newChildrenCount < currentAges.length) {\n            return currentAges.slice(0, newChildrenCount);\n        }\n        return currentAges;\n    }\n    const handleDeleteRoom = (index: number) => {\n        setBookingData(prev => {\n            const updateRooms = new Map(prev.rooms);\n            updateRooms.delete(index); // room siempre es true ya que el botton delete siempre se mostrara cu\n            return {\n                ...prev,\n                rooms: updateRooms\n            }\n        })\n    }\n    const handleDataUser = (guestData: guest) => {\n        setBookingData(prev => ({\n            ...prev,\n            guest: guestData\n        }))\n\n    }\n    const handleDateUpdate = (field: keyof date, e: React.ChangeEvent<HTMLInputElement>) => {\n        const newDate = new Date(e.target.value);\n        setBookingData(prev => ({\n            ...prev,\n            date: {\n                ...prev.date,\n                [field]: newDate,\n            },\n        }));\n    };\n    const handleAgesChanges = (roomIndex: number, childrenIndex: number, value: number) => {\n        setBookingData(prev => {\n            const newRooms = new Map(prev.rooms);\n            const roomToUpdate = newRooms.get(roomIndex);\n            if (roomToUpdate) {\n                const updatedChild = {\n                    ...roomToUpdate.child,\n                    ages: \n                    roomToUpdate.child.ages?.map((age, index) =>\n                        index === childrenIndex ? value : age\n                    )\n                };\n                const updatedRoom = {\n                    ...roomToUpdate,\n                    child: updatedChild\n                };\n                newRooms.set(roomIndex, updatedRoom);\n            }\n            return {\n                ...prev,\n                rooms: newRooms,\n            };\n        });\n    };\n\n    const childrenQuantityDecrement = (index: number) => {\n        setBookingData((prev) => {\n            const newRooms = new Map(prev.rooms);\n            const roomToUpdate = newRooms.get(index);\n            if (roomToUpdate && roomToUpdate.child.childCount! > 0) {\n                const updateRoom = {\n                    ...roomToUpdate,\n                    child: {\n                        ...roomToUpdate.child,\n                        childCount: roomToUpdate.child.childCount! - 1\n                    },\n                };\n                newRooms.set(index, updateRoom); \n            }\n            return {\n                ...prev,\n                rooms: newRooms,\n            };\n        });\n    };\n\n    const childrenQuantityIncrement = (index: number) => {\n        setBookingData((prev) => {\n            const newRooms = new Map(prev.rooms);\n            const roomToUpdate = newRooms.get(index);\n            if (roomToUpdate) {\n                const updatedRoom = {\n                    ...roomToUpdate,\n                    child: {\n                        ...roomToUpdate.child,\n                        childCount: roomToUpdate.child.childCount! + 1,\n                    },\n                };\n                newRooms.set(index, updatedRoom);\n            }\n            return {\n                ...prev,\n                rooms: newRooms,\n            };\n        });\n    };\n\n    const adultQuantityDecrement = (index: number) => {\n        setBookingData((prev) => {\n            const newRooms = new Map(prev.rooms);\n            const roomToUpdate = newRooms.get(index);\n            if (roomToUpdate && roomToUpdate.adultCount > 1) {\n                const updateRoom = {\n                    ...roomToUpdate,\n                    adultCount: roomToUpdate.adultCount - 1\n                };\n                newRooms.set(index, updateRoom)\n            }\n            return {\n                ...prev,\n                rooms: newRooms,\n            };\n        });\n    };\n\n    const adultQuantityIncrement = (index: number) => {\n        setBookingData((prev) => {\n            const newRooms = new Map(prev.rooms);\n            const roomToUpdate = newRooms.get(index);\n            if (roomToUpdate) {\n                const updateRoom = {\n                    ...roomToUpdate,\n                    adultCount: roomToUpdate.adultCount + 1\n                }\n                newRooms.set(index, updateRoom);\n            }\n            return {\n                ...prev,\n                rooms: newRooms,\n            };\n        });\n    };\n\n    const checkAges = (): boolean => {\n        for (const room of Array.from(bookingData.rooms.values())) {\n            let index = 0;\n            for (const value of room.child.ages!) {\n                if (value === \"\" || value === `--Select child ${index + 1} Age--`) {\n                    return false;\n                }\n                index++;\n            }\n        }\n        return true;\n    };\n\n    const handleAgeByIndex = (roomIndex: number, value: string[]): Map<number, Room> => {\n        const roomsUpdate: Map<number, Room> = new Map(bookingData.rooms);\n        const roomToUpdate = roomsUpdate.get(roomIndex);\n        if (roomToUpdate) {\n            roomToUpdate.child.ages = value;\n        }\n        return roomsUpdate;\n    };\n    const updateAgesLenght = (index: number, newLength: number) => {\n        const updateRooms = new Map(bookingData.rooms);\n        const room = updateRooms.get(index);\n        if (room && room.child.childCount! > 0) {\n            room.child.ages = Array(newLength).fill(\" \");\n            updateRooms.set(index, room);\n            setBookingData({ ...bookingData, rooms: updateRooms });\n        }\n    }\n    const handleAgesChange = (roomIndex: number, newAges: string[]) => {\n        const updateRooms = new Map(bookingData.rooms);\n        const room = updateRooms.get(roomIndex);\n        if (room && room.child.childCount! > 0) {\n            room.child.ages = newAges;\n            updateRooms.set(roomIndex, room);\n            setBookingData({ ...bookingData, rooms: updateRooms })\n        }\n    }\n    const calculateSum = (key: field): number => {\n        return Array.from(bookingData.rooms.values()).reduce((sum, room) => {\n            if (key === 'adultCount') {\n                return sum + room.adultCount;\n            } else if (key === 'childCount') {\n                return sum + room.child.childCount!;\n            }\n            return sum;\n        }, 0);\n    };\n\n    const getGuestInfo = (input: string): string | number => {\n        if (input !== 'stat' && input !== 'sum') {\n            throw new Error(\"Input must be 'stat' or 'sum'\");\n        }\n        const adultSum = calculateSum('adultCount');\n        const childSum = calculateSum('childCount');\n        const roomsSum = bookingData.rooms.size;\n        if (input === 'stat') {\n            const adultTitle = adultSum > 1 ? 'adults' : 'adult';\n            const childTitle = childSum > 1 ? 'children' : 'child';\n            const roomTitle = roomsSum  > 1 ? 'rooms' : 'room';\n            const StatGuestFormatted = childSum === 0 ?\n                `${adultTitle} ${adultSum}, ${roomTitle}  ${roomsSum}` :\n                `${adultTitle} ${adultSum}, ${childTitle} ${childSum}, ${roomTitle} ${roomsSum}`;\n            return StatGuestFormatted;\n        } else if (input === 'sum') {\n            return (adultSum + childSum);\n        }\n        return 0\n    }\n\n    const updateAges = useCallback((roomIndex: number, childrenCount: number)=>{\n        setBookingData(prev => {\n            const newRooms = new Map(prev.rooms);\n            const roomToUpdate = newRooms.get(roomIndex);\n            if (roomToUpdate) {\n                const currentAges = roomToUpdate.child.ages || [];\n                const updatedAges = [...currentAges];\n                // Asegurarse de que el tamaño del array de edades coincida con childrenCount\n                while (updatedAges.length < childrenCount) {\n                    updatedAges.push(\"\");\n                }\n                // Si el número de niños disminuye, ajustar el array de edades\n                if (updatedAges.length > childrenCount) {\n                    updatedAges.splice(childrenCount);\n                }\n                const updatedChild = {\n                    ...roomToUpdate.child,\n                    ages: updatedAges\n                };\n                const updatedRoom = {\n                    ...roomToUpdate,\n                    child: updatedChild\n                };\n                newRooms.set(roomIndex, updatedRoom);\n            }\n            return {\n                ...prev,\n                rooms: newRooms\n            };\n        });\n    }, [])\n    \n    return (\n        <BookingContext.Provider\n            value={{\n                bookingData, setBookingData, handleAddNewRoom, handleDeleteRoom,\n                handleAgesChange, updateAgesLenght, handleAgeByIndex, handleDateUpdate, getAges,\n                getGuestInfo, handleDataUser, checkAges, childrenQuantityDecrement, childrenQuantityIncrement,\n                adultQuantityDecrement, adultQuantityIncrement,handleAgesChanges,updateAges\n            }}\n        >\n            {children}\n        </BookingContext.Provider>\n    );\n};\n\nexport const useBookingContext = () => {\n    const context = useContext(BookingContext);\n    if (context === undefined) {\n        throw new Error('useBookingContext must be used within a BookingProvider');\n    }\n    return context;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}