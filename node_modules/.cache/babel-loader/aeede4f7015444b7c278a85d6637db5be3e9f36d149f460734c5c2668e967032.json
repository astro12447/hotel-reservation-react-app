{"ast":null,"code":"var _jsxFileName = \"/Users/ismaelnvo/Desktop/hotelReservation/hotel-reservation/src/components/ContexApplication.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\n// const CheckFrecuency = (numbers:number[]):Map<number, number>=>{\n//     return numbers.reduce((freq, value)=>{\n//         freq.set(value, (freq.get(value)|| 0 ) + 1);\n//         return freq;\n//     }, new Map<number,number>);  \n// }\nconst BookingContext = /*#__PURE__*/createContext(undefined);\n//Proveedor del contexto \nexport const BookingProvider = ({\n  children\n}) => {\n  _s();\n  const inicialRoom = new Map();\n  inicialRoom.set(1, {\n    adultCount: 1,\n    child: {\n      childCount: 0,\n      ages: []\n    }\n  });\n  const [bookingData, setBookingData] = useState({\n    date: {\n      checkIn: new Date(),\n      checkOut: new Date()\n    },\n    rooms: inicialRoom\n  });\n  const handleAddNewRoom = () => {\n    //creamos un objeto con el identificador newRom de interface room, le asignamos sus correspondientes valores\n    const newRoom = {\n      adultCount: 1,\n      child: {\n        childCount: 0,\n        ages: []\n      }\n    };\n    //Hacemos una copia del estado anterior de rooms\n    const updateRooms = new Map(bookingData.rooms);\n    // Incertamos new room que acabamos de crear, con el parametro number igual al \n    // estado rooms anterior le asignamos el valor rooms.size()\n    updateRooms.set(bookingData.rooms.size + 1, newRoom);\n    //Llamamos la funcion actuaciona, hacemos una copia del estado anterior, y modificamos el estado anterior de rooms\n    //con los cambios anteriores realizados.\n    setBookingData(prev => ({\n      ...prev,\n      rooms: updateRooms\n    }));\n  };\n  const getAges = (currentAges, newChildrenCount) => {\n    if (newChildrenCount > currentAges.length) {\n      return [...currentAges, ...Array(newChildrenCount - currentAges.length).fill(\"\")];\n    } else if (newChildrenCount < currentAges.length) {\n      return currentAges.slice(0, newChildrenCount);\n    }\n    return currentAges;\n  };\n  const handleDeleteRoom = index => {\n    setBookingData(prev => {\n      const updateRooms = new Map(prev.rooms);\n      updateRooms.delete(index); // room siempre es true ya que el botton delete siempre se mostrara cu\n      return {\n        ...prev,\n        rooms: updateRooms\n      };\n    });\n  };\n  const handleDataUser = guestData => {\n    setBookingData(prev => ({\n      ...prev,\n      guest: guestData\n    }));\n  };\n  const handleDateUpdate = (field, e) => {\n    const newDate = new Date(e.target.value);\n    setBookingData(prev => ({\n      ...prev,\n      date: {\n        ...prev.date,\n        [field]: newDate\n      }\n    }));\n  };\n  // const handleGuestCountChange = (field: field, index: number, value: number) => {\n  //     setBookingData(prev => {\n  //         const updateRooms = new Map(prev.rooms);\n  //         const GuestUpdate = updateRooms.get(index);\n  //         if (GuestUpdate) {\n  //             if (field === 'adultCount') {\n  //                 GuestUpdate.adultCount = value;\n  //             } else if (field === 'childCount') {\n  //                 GuestUpdate.child.childCount = value\n  //             }\n  //             updateRooms.set(index, GuestUpdate);\n  //             return {\n  //                 ...prev,\n  //                 rooms: updateRooms\n  //             }\n  //         }\n  //         return prev;\n\n  //     });\n  // }\n\n  const checkAges = () => {\n    for (const room of Array.from(bookingData.rooms.values())) {\n      let index = 0;\n      for (const value of room.child.ages) {\n        if (value === \"\" || value === `--Select child ${index + 1} Age--`) {\n          return false;\n        }\n        index++;\n      }\n    }\n    return true;\n  };\n  const handleAgeByIndex = (roomIndex, value) => {\n    const roomsUpdate = new Map(bookingData.rooms);\n    const roomToUpdate = roomsUpdate.get(roomIndex);\n    if (roomToUpdate) {\n      roomToUpdate.child.ages = value;\n    }\n    return roomsUpdate;\n  };\n  const updateAgesLenght = (index, newLength) => {\n    const updateRooms = new Map(bookingData.rooms);\n    const room = updateRooms.get(index);\n    if (room) {\n      room.child.ages = Array(newLength).fill(\" \");\n      updateRooms.set(index, room);\n      setBookingData({\n        ...bookingData,\n        rooms: updateRooms\n      });\n    }\n  };\n  const handleAgesChange = (roomIndex, newAges) => {\n    const updateRooms = new Map(bookingData.rooms);\n    const room = updateRooms.get(roomIndex);\n    if (room) {\n      room.child.ages = newAges;\n      updateRooms.set(roomIndex, room);\n      setBookingData({\n        ...bookingData,\n        rooms: updateRooms\n      });\n    }\n  };\n  const calculateSum = key => {\n    return Array.from(bookingData.rooms.values()).reduce((sum, room) => {\n      if (key === 'adultCount') {\n        return sum + room.adultCount;\n      } else if (key === 'childCount') {\n        return sum + room.child.childCount;\n      }\n      return sum;\n    }, 0);\n  };\n  const getGuestInfo = input => {\n    if (input !== 'stat' && input !== 'sum') {\n      throw new Error(\"Input must be 'stat' or 'sum'\");\n    }\n    const adultSum = calculateSum('adultCount');\n    const childSum = calculateSum('childCount');\n    const roomsSum = bookingData.rooms.size;\n    if (input === 'stat') {\n      const adultTitle = adultSum > 1 ? 'adults' : 'adult';\n      const childTitle = childSum > 1 ? 'children' : 'child';\n      const roomTitle = roomsSum > 1 ? 'rooms' : 'room';\n      const StatGuestFormatted = childSum === 0 ? `${adultTitle} ${adultSum}, ${roomTitle}  ${roomsSum}` : `${adultTitle} ${adultSum}, ${childTitle} ${childSum}, ${roomTitle} ${roomsSum}`;\n      return StatGuestFormatted;\n    } else if (input === 'sum') {\n      return adultSum + childSum;\n    }\n    return 0;\n  };\n  return /*#__PURE__*/_jsxDEV(BookingContext.Provider, {\n    value: {\n      bookingData,\n      setBookingData,\n      handleAddNewRoom,\n      handleDeleteRoom,\n      handleAgesChange,\n      updateAgesLenght,\n      handleAgeByIndex,\n      handleDateUpdate,\n      getAges,\n      getGuestInfo,\n      handleDataUser,\n      checkAges\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 9\n  }, this);\n};\n_s(BookingProvider, \"lbohCHQksMbRMygLRjXOtRUCXN0=\");\n_c = BookingProvider;\nexport const useBookingContext = () => {\n  _s2();\n  const context = useContext(BookingContext);\n  if (context === undefined) {\n    throw new Error('useBookingContext must be used within a BookingProvider');\n  }\n  return context;\n};\n_s2(useBookingContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"BookingProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","BookingContext","undefined","BookingProvider","children","_s","inicialRoom","Map","set","adultCount","child","childCount","ages","bookingData","setBookingData","date","checkIn","Date","checkOut","rooms","handleAddNewRoom","newRoom","updateRooms","size","prev","getAges","currentAges","newChildrenCount","length","Array","fill","slice","handleDeleteRoom","index","delete","handleDataUser","guestData","guest","handleDateUpdate","field","e","newDate","target","value","checkAges","room","from","values","handleAgeByIndex","roomIndex","roomsUpdate","roomToUpdate","get","updateAgesLenght","newLength","handleAgesChange","newAges","calculateSum","key","reduce","sum","getGuestInfo","input","Error","adultSum","childSum","roomsSum","adultTitle","childTitle","roomTitle","StatGuestFormatted","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useBookingContext","_s2","context","$RefreshReg$"],"sources":["/Users/ismaelnvo/Desktop/hotelReservation/hotel-reservation/src/components/ContexApplication.tsx"],"sourcesContent":["import React, { createContext, useState, useContext } from \"react\";\nimport { resevationData } from \"../interfaces/ReservationData\";\nimport { Room } from \"../interfaces/Room\";\nimport { date } from \"../interfaces/BookedDate\";\nimport { guest } from \"../interfaces/guest\";\ntype field = \"adultCount\" | \"childCount\";\ninterface BookingContextProps {\n    bookingData: resevationData;\n    setBookingData: React.Dispatch<React.SetStateAction<resevationData>>;\n    handleAddNewRoom: () => void;\n    handleDeleteRoom: (index: number) => void;\n    //handleGuestCountChange: (field: field, index: number, value: number) => void;\n    handleAgesChange: (roomIndex: number, newAges: string[]) => void;\n    updateAgesLenght: (index: number, newLength: number) => void;\n    handleAgeByIndex: (roomIndex: number, value: string[]) => Map<number, Room>;\n    getAges: (currentAges: string[], newChildrenCount: number) => string[];\n    handleDateUpdate: (field: keyof date, e: React.ChangeEvent<HTMLInputElement>) => void;\n    getGuestInfo: (input: string) => string | number;\n    handleDataUser:(guestData:guest)=>void;\n    checkAges: ()=> boolean;\n    // childrenQuantityIncrement:(index:number)=>void;\n    // childrenQuantityDecrement:(index:number)=>void;\n    // adultQuantityIncrement:(index:number)=>void;\n    // adultQuantityDecrement:(index:number)=>void;\n\n};\n\ninterface bookingProviderProps {\n    children: React.ReactNode;\n}\n// const CheckFrecuency = (numbers:number[]):Map<number, number>=>{\n//     return numbers.reduce((freq, value)=>{\n//         freq.set(value, (freq.get(value)|| 0 ) + 1);\n//         return freq;\n//     }, new Map<number,number>);  \n// }\nconst BookingContext = createContext<BookingContextProps | undefined>(undefined);\n//Proveedor del contexto \nexport const BookingProvider: React.FC<bookingProviderProps> = ({ children }) => {\n    const inicialRoom = new Map<number, Room>();\n    inicialRoom.set(1, { adultCount: 1, child: { childCount: 0, ages: [] } });\n    const [bookingData, setBookingData] = useState<resevationData>({\n        date: { checkIn: new Date(), checkOut: new Date() },\n        rooms: inicialRoom\n    });\n    const handleAddNewRoom = () => {\n        //creamos un objeto con el identificador newRom de interface room, le asignamos sus correspondientes valores\n        const newRoom: Room = {\n            adultCount: 1,\n            child: { childCount: 0, ages: [] }\n        }\n        //Hacemos una copia del estado anterior de rooms\n        const updateRooms = new Map(bookingData.rooms);\n        // Incertamos new room que acabamos de crear, con el parametro number igual al \n        // estado rooms anterior le asignamos el valor rooms.size()\n        updateRooms.set(bookingData.rooms.size + 1, newRoom);\n        //Llamamos la funcion actuaciona, hacemos una copia del estado anterior, y modificamos el estado anterior de rooms\n        //con los cambios anteriores realizados.\n        setBookingData(prev => ({\n            ...prev,\n            rooms: updateRooms\n        }))\n    }\n    const getAges = (currentAges: string[], newChildrenCount: number): string[] => {\n        if (newChildrenCount > currentAges.length) {\n            return [...currentAges, ...Array(newChildrenCount - currentAges.length).fill(\"\")];\n        } else if (newChildrenCount < currentAges.length) {\n            return currentAges.slice(0, newChildrenCount);\n        }\n        return currentAges;\n    }\n    const handleDeleteRoom = (index: number) => {\n        setBookingData(prev => {\n            const updateRooms = new Map(prev.rooms);\n            updateRooms.delete(index); // room siempre es true ya que el botton delete siempre se mostrara cu\n            return {\n                ...prev,\n                rooms: updateRooms\n            }\n        })\n    }\n    const handleDataUser = (guestData: guest) => {\n        setBookingData(prev => ({\n            ...prev,\n            guest: guestData\n        }))\n\n    }\n    const handleDateUpdate = (field: keyof date, e: React.ChangeEvent<HTMLInputElement>) => {\n        const newDate = new Date(e.target.value);\n        setBookingData(prev => ({\n            ...prev,\n            date: {\n                ...prev.date,\n                [field]: newDate,\n            },\n        }));\n    };\n    // const handleGuestCountChange = (field: field, index: number, value: number) => {\n    //     setBookingData(prev => {\n    //         const updateRooms = new Map(prev.rooms);\n    //         const GuestUpdate = updateRooms.get(index);\n    //         if (GuestUpdate) {\n    //             if (field === 'adultCount') {\n    //                 GuestUpdate.adultCount = value;\n    //             } else if (field === 'childCount') {\n    //                 GuestUpdate.child.childCount = value\n    //             }\n    //             updateRooms.set(index, GuestUpdate);\n    //             return {\n    //                 ...prev,\n    //                 rooms: updateRooms\n    //             }\n    //         }\n    //         return prev;\n\n    //     });\n    // }\n\n    \n\n    const checkAges = (): boolean => {\n        for (const room of Array.from(bookingData.rooms.values())) {\n            let index = 0;\n            for (const value of room.child.ages) {\n                if (value === \"\" || value === `--Select child ${index + 1} Age--`) {\n                    return false;\n                }\n                index++;\n            }\n        }\n        return true;\n    };\n    \n    const handleAgeByIndex = (roomIndex: number, value: string[]): Map<number, Room> => {\n        const roomsUpdate: Map<number, Room> = new Map(bookingData.rooms);\n        const roomToUpdate = roomsUpdate.get(roomIndex);\n        if (roomToUpdate) {\n            roomToUpdate.child.ages = value;\n        }\n        return roomsUpdate;\n    };\n    const updateAgesLenght = (index: number, newLength: number) => {\n        const updateRooms = new Map(bookingData.rooms);\n        const room = updateRooms.get(index);\n        if (room) {\n            room.child.ages = Array(newLength).fill(\" \");\n            updateRooms.set(index, room);\n            setBookingData({ ...bookingData, rooms: updateRooms });\n        }\n    }\n    const handleAgesChange = (roomIndex: number, newAges: string[]) => {\n        const updateRooms = new Map(bookingData.rooms);\n        const room = updateRooms.get(roomIndex);\n        if (room) {\n            room.child.ages = newAges;\n            updateRooms.set(roomIndex, room);\n            setBookingData({ ...bookingData, rooms: updateRooms })\n        }\n    }\n    const calculateSum = (key: field): number => {\n        return Array.from(bookingData.rooms.values()).reduce((sum, room) => {\n            if (key === 'adultCount') {\n                return sum + room.adultCount;\n            } else if (key === 'childCount') {\n                return sum + room.child.childCount;\n            }\n            return sum;\n        }, 0);\n    };\n\n    const getGuestInfo = (input: string): string | number => {\n        if (input !== 'stat' && input !== 'sum') {\n            throw new Error(\"Input must be 'stat' or 'sum'\");\n        }\n        const adultSum = calculateSum('adultCount');\n        const childSum = calculateSum('childCount');\n        const roomsSum = bookingData.rooms.size;\n        if (input === 'stat') {\n            const adultTitle = adultSum > 1 ? 'adults' : 'adult';\n            const childTitle = childSum > 1 ? 'children' : 'child';\n            const roomTitle = roomsSum  > 1 ? 'rooms' : 'room';\n            const StatGuestFormatted = childSum === 0 ?\n                `${adultTitle} ${adultSum}, ${roomTitle}  ${roomsSum}` :\n                `${adultTitle} ${adultSum}, ${childTitle} ${childSum}, ${roomTitle} ${roomsSum}`;\n            return StatGuestFormatted;\n        } else if (input === 'sum') {\n            return (adultSum + childSum);\n        }\n        return 0\n    }\n    return (\n        <BookingContext.Provider\n            value={{\n                bookingData, setBookingData, handleAddNewRoom, handleDeleteRoom,\n                handleAgesChange, updateAgesLenght, handleAgeByIndex, handleDateUpdate, getAges,\n                getGuestInfo, handleDataUser,checkAges\n            }}\n        >\n            {children}\n        </BookingContext.Provider>\n    );\n};\n\nexport const useBookingContext = () => {\n    const context = useContext(BookingContext);\n    if (context === undefined) {\n        throw new Error('useBookingContext must be used within a BookingProvider');\n    }\n    return context;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}