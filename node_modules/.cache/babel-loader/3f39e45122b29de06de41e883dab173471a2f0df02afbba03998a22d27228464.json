{"ast":null,"code":"var _jsxFileName = \"/Users/ismaelnvo/Desktop/hotelReservation/hotel-reservation/src/components/GuestForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { AgesForm } from './AgesForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GuestForm = ({\n  onSendRoom\n}) => {\n  _s();\n  const [roomsData, setRoomsData] = useState([{\n    adultCount: 1,\n    child: {\n      childCount: 0,\n      ages: []\n    }\n  }]);\n  const handleAddRoom = () => {\n    const newRoom = {\n      adultCount: 1,\n      child: {\n        childCount: 0,\n        ages: []\n      }\n    };\n    setRoomsData(prevRooms => [...prevRooms, newRoom]);\n  };\n  useEffect(() => {\n    onSendRoom(roomsData);\n  }, [roomsData, onSendRoom]);\n  console.log(roomsData, 'From Rooms');\n  const handleAgesChange = (roomIndex, newAges) => {\n    setRoomsData(prevData => {\n      if (!Array.isArray(prevData)) {\n        console.error('roomsData is not an array:', prevData);\n        return prevData;\n      }\n      return prevData.map((room, index) => index === roomIndex ? {\n        ...room,\n        child: {\n          ...room.child,\n          ages: newAges\n        }\n      } : room);\n    });\n  };\n  const handleDeleteRoom = roomIndex => {\n    setRoomsData(prevRooms => {\n      if (!Array.isArray(prevRooms)) {\n        console.error('roomsData is not an array:', prevRooms);\n        return prevRooms;\n      }\n      return prevRooms.filter((_, index) => index !== roomIndex);\n    });\n  };\n  const handleGuestChange = (roomIndex, field, value) => {\n    setRoomsData(prevRooms => {\n      if (!Array.isArray(prevRooms)) {\n        console.error('roomsData is not an array:', prevRooms);\n        return prevRooms;\n      }\n      const newRooms = [...prevRooms];\n      const roomToUpdate = {\n        ...newRooms[roomIndex]\n      };\n      if (field === 'adultCount') {\n        roomToUpdate.adultCount = value;\n      } else if (field === 'childCount') {\n        roomToUpdate.child = {\n          ...roomToUpdate.child,\n          childCount: value\n        };\n      }\n      newRooms[roomIndex] = roomToUpdate;\n      return newRooms;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"GuestForm\",\n    children: [Array.isArray(roomsData) && roomsData.map((room, roomIndex) => /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: room.adultCount,\n        onChange: e => handleGuestChange(roomIndex, 'adultCount', Number(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: room.child.childCount,\n        onChange: e => handleGuestChange(roomIndex, 'childCount', Number(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this), room.child.childCount > 0 && /*#__PURE__*/_jsxDEV(AgesForm, {\n        childCount: room.child.childCount,\n        onAgesChange: newAges => handleAgesChange(roomIndex, newAges)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 25\n      }, this), roomIndex > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => handleDeleteRoom(roomIndex),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 25\n      }, this)]\n    }, roomIndex, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddRoom,\n      children: \"addRoom\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(GuestForm, \"hi97iN7Hl/Cl8HY0SuvFJ0lRyI0=\");\n_c = GuestForm;\nvar _c;\n$RefreshReg$(_c, \"GuestForm\");","map":{"version":3,"names":["React","useEffect","useState","AgesForm","jsxDEV","_jsxDEV","GuestForm","onSendRoom","_s","roomsData","setRoomsData","adultCount","child","childCount","ages","handleAddRoom","newRoom","prevRooms","console","log","handleAgesChange","roomIndex","newAges","prevData","Array","isArray","error","map","room","index","handleDeleteRoom","filter","_","handleGuestChange","field","value","newRooms","roomToUpdate","className","children","type","onChange","e","Number","target","fileName","_jsxFileName","lineNumber","columnNumber","onAgesChange","onClick","_c","$RefreshReg$"],"sources":["/Users/ismaelnvo/Desktop/hotelReservation/hotel-reservation/src/components/GuestForm.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Room } from '../interfaces/Room';\nimport { AgesForm } from './AgesForm';\n\ntype Field = 'adultCount' | 'childCount';\n\ninterface GuestFormProps {\n    onSendRoom: (rooms: Room[]) => void;\n}\n\nexport const GuestForm: React.FC<GuestFormProps> = ({ onSendRoom }) => {\n    const [roomsData, setRoomsData] = useState<Room[]>([{ adultCount: 1, child: { childCount: 0, ages: [] } }]);\n\n    const handleAddRoom = () => {\n        const newRoom = {\n            adultCount: 1,\n            child: {\n                childCount: 0,\n                ages: []\n            }\n        };\n        setRoomsData(prevRooms => [...prevRooms, newRoom]);\n    };\n\n    useEffect(() => {\n        onSendRoom(roomsData);\n    }, [roomsData, onSendRoom]);\n\n    console.log(roomsData, 'From Rooms');\n\n    const handleAgesChange = (roomIndex: number, newAges: number[]) => {\n        setRoomsData(prevData => {\n            if (!Array.isArray(prevData)) {\n                console.error('roomsData is not an array:', prevData);\n                return prevData;\n            }\n            return prevData.map((room, index) =>\n                index === roomIndex ? { ...room, child: { ...room.child, ages: newAges } } : room\n            );\n        });\n    };\n\n    const handleDeleteRoom = (roomIndex: number) => {\n        setRoomsData(prevRooms => {\n            if (!Array.isArray(prevRooms)) {\n                console.error('roomsData is not an array:', prevRooms);\n                return prevRooms;\n            }\n            return prevRooms.filter((_, index) => index !== roomIndex);\n        });\n    };\n\n    const handleGuestChange = (roomIndex: number, field: Field, value: number) => {\n        setRoomsData(prevRooms => {\n            if (!Array.isArray(prevRooms)) {\n                console.error('roomsData is not an array:', prevRooms);\n                return prevRooms;\n            }\n            const newRooms = [...prevRooms];\n            const roomToUpdate = { ...newRooms[roomIndex] };\n\n            if (field === 'adultCount') {\n                roomToUpdate.adultCount = value;\n            } else if (field === 'childCount') {\n                roomToUpdate.child = { ...roomToUpdate.child, childCount: value };\n            }\n\n            newRooms[roomIndex] = roomToUpdate;\n            return newRooms;\n        });\n    };\n\n    return (\n        <div className='GuestForm'>\n            {Array.isArray(roomsData) && roomsData.map((room, roomIndex) => (\n                <form key={roomIndex}>\n                    <input\n                        type=\"number\"\n                        value={room.adultCount}\n                        onChange={(e) => handleGuestChange(roomIndex, 'adultCount', Number(e.target.value))}\n                    />\n                    <input\n                        type=\"number\"\n                        value={room.child.childCount}\n                        onChange={(e) => handleGuestChange(roomIndex, 'childCount', Number(e.target.value))}\n                    />\n                    {room.child.childCount > 0 && (\n                        <AgesForm\n                            childCount={room.child.childCount}\n                            onAgesChange={(newAges) => handleAgesChange(roomIndex, newAges)}\n                        />\n                    )}\n                    {roomIndex > 0 && (\n                        <button type='button' onClick={() => handleDeleteRoom(roomIndex)}>Delete</button>\n                    )}\n                </form>\n            ))}\n            <button onClick={handleAddRoom}>addRoom</button>\n        </div>\n    );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}