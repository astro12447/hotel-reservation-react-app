{"ast":null,"code":"var _jsxFileName = \"/Users/ismaelnvo/Desktop/hotelReservation/hotel-reservation/src/components/ContexApplication.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\nconst BookingContext = /*#__PURE__*/createContext(undefined);\n//Proveedor del contexto \nexport const BookingProvider = ({\n  children\n}) => {\n  _s();\n  const inicialRoom = new Map();\n  inicialRoom.set(1, {\n    adultCount: 1,\n    child: {\n      childCount: 0,\n      ages: []\n    }\n  });\n  const [bookingData, setBookingData] = useState({\n    date: {\n      checkIn: new Date(),\n      checkOut: new Date()\n    },\n    rooms: inicialRoom,\n    guest: {\n      name: '',\n      lastName: '',\n      email: '',\n      phone: ''\n    }\n  });\n  const handleAddNewRoom = () => {\n    //creamos un objeto con el identificador newRom de interface room, le asignamos sus correspondientes valores\n    const newRoom = {\n      adultCount: 1,\n      child: {\n        childCount: 0,\n        ages: []\n      }\n    };\n    //Hacemos una copia del estado anterior de rooms\n    const updateRooms = new Map(bookingData.rooms);\n    // Incertamos new room que acabamos de crear, con el parametro number igual al \n    // estado rooms anterior le asignamos el valor rooms.size()\n    updateRooms.set(bookingData.rooms.size + 1, newRoom);\n    //Llamamos la funcion actuaciona, hacemos una copia del estado anterior, y modificamos el estado anterior de rooms\n    //con los cambios anteriores realizados.\n    setBookingData(prev => ({\n      ...prev,\n      rooms: updateRooms\n    }));\n  };\n  const getAges = (currentAges, newChildrenCount) => {\n    if (newChildrenCount > currentAges.length) {\n      return [...currentAges, ...Array(newChildrenCount - currentAges.length).fill(\"\")];\n    } else if (newChildrenCount < currentAges.length) {\n      return currentAges.slice(0, newChildrenCount);\n    }\n    return currentAges;\n  };\n  const handleDeleteRoom = index => {\n    setBookingData(prev => {\n      const updateRooms = new Map(prev.rooms);\n      updateRooms.delete(index);\n      return {\n        ...prev,\n        rooms: updateRooms\n      };\n    });\n  };\n  const handleGuestCountChange = (field, index, value) => {\n    setBookingData(prev => {\n      const updateRooms = new Map(prev.rooms);\n      const GuestUpdate = updateRooms.get(index);\n      if (GuestUpdate) {\n        if (field === 'adultCount') {\n          GuestUpdate.adultCount = value;\n        } else if (field === 'childCount') {\n          GuestUpdate.child.childCount = value;\n        }\n        updateRooms.set(index, GuestUpdate);\n        return {\n          ...prev,\n          rooms: updateRooms\n        };\n      }\n      return prev;\n    });\n  };\n  const handleAgeByIndex = (roomIndex, ChildAgeIndex, value) => {\n    const roomsUpdate = new Map(bookingData.rooms);\n    const roomToUpdate = roomsUpdate.get(roomIndex);\n    if (roomToUpdate) {\n      roomToUpdate.child.ages[ChildAgeIndex] = value;\n    }\n    setBookingData({\n      ...bookingData,\n      rooms: roomsUpdate\n    });\n  };\n  const updateAgesLenght = (index, newLength) => {\n    const updateRooms = new Map(bookingData.rooms);\n    const room = updateRooms.get(index);\n    if (room) {\n      room.child.ages = Array(newLength).fill(\"Selected Child Age\");\n      updateRooms.set(index, room);\n      setBookingData({\n        ...bookingData,\n        rooms: updateRooms\n      });\n    }\n  };\n  const handleAgesChange = (roomIndex, newAges) => {\n    const updateRooms = new Map(bookingData.rooms);\n    const room = updateRooms.get(roomIndex);\n    if (room) {\n      room.child.ages = newAges;\n      updateRooms.set(roomIndex, room);\n      setBookingData({\n        ...bookingData,\n        rooms: updateRooms\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(BookingContext.Provider, {\n    value: {\n      bookingData,\n      setBookingData,\n      handleAddNewRoom,\n      handleDeleteRoom,\n      handleGuestCountChange,\n      handleAgesChange,\n      updateAgesLenght,\n      handleAgeByIndex,\n      getAges\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n};\n_s(BookingProvider, \"x+8R61I6HIMWxRaFunkRpgXTH3Y=\");\n_c = BookingProvider;\nexport const useBookingContext = () => {\n  _s2();\n  const context = useContext(BookingContext);\n  if (context === undefined) {\n    throw new Error('useBookingContext must be used within a BookingProvider');\n  }\n  return context;\n};\n_s2(useBookingContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"BookingProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","BookingContext","undefined","BookingProvider","children","_s","inicialRoom","Map","set","adultCount","child","childCount","ages","bookingData","setBookingData","date","checkIn","Date","checkOut","rooms","guest","name","lastName","email","phone","handleAddNewRoom","newRoom","updateRooms","size","prev","getAges","currentAges","newChildrenCount","length","Array","fill","slice","handleDeleteRoom","index","delete","handleGuestCountChange","field","value","GuestUpdate","get","handleAgeByIndex","roomIndex","ChildAgeIndex","roomsUpdate","roomToUpdate","updateAgesLenght","newLength","room","handleAgesChange","newAges","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useBookingContext","_s2","context","Error","$RefreshReg$"],"sources":["/Users/ismaelnvo/Desktop/hotelReservation/hotel-reservation/src/components/ContexApplication.tsx"],"sourcesContent":["import React, { createContext, useState, useContext } from \"react\";\nimport { resevationData } from \"../interfaces/ReservationData\";\nimport { Room } from \"../interfaces/Room\";\ntype field = \"adultCount\" | \"childCount\";\ninterface BookingContextProps {\n    bookingData: resevationData;\n    setBookingData: React.Dispatch<React.SetStateAction<resevationData>>;\n    handleAddNewRoom: () => void;\n    handleDeleteRoom: (index: number) => void;\n    handleGuestCountChange: (field: field, index: number, value: number) => void;\n    handleAgesChange: (roomIndex: number, newAges: string[]) => void;\n    updateAgesLenght: (index: number, newLength: number) => void;\n    handleAgeByIndex: (roomIndex: number, ChildAgeIndex: number, value: string) => void;\n    getAges: (currentAges: string[], newChildrenCount: number)=>string[];\n};\n\ninterface bookingProviderProps {\n    children: React.ReactNode;\n}\n\nconst BookingContext = createContext<BookingContextProps | undefined>(undefined);\n//Proveedor del contexto \nexport const BookingProvider: React.FC<bookingProviderProps> = ({ children }) => {\n    const inicialRoom = new Map<number, Room>();\n    inicialRoom.set(1, { adultCount: 1, child: { childCount: 0, ages: [] } });\n    const [bookingData, setBookingData] = useState<resevationData>({\n        date: { checkIn: new Date(), checkOut: new Date() },\n        rooms: inicialRoom,\n        guest: { name: '', lastName: '', email: '', phone: '' }\n    });\n    const handleAddNewRoom = () => {\n        //creamos un objeto con el identificador newRom de interface room, le asignamos sus correspondientes valores\n        const newRoom: Room = {\n            adultCount: 1,\n            child: { childCount: 0, ages: [] }\n        }\n        //Hacemos una copia del estado anterior de rooms\n        const updateRooms = new Map(bookingData.rooms);\n        // Incertamos new room que acabamos de crear, con el parametro number igual al \n        // estado rooms anterior le asignamos el valor rooms.size()\n        updateRooms.set(bookingData.rooms.size + 1, newRoom);\n        //Llamamos la funcion actuaciona, hacemos una copia del estado anterior, y modificamos el estado anterior de rooms\n        //con los cambios anteriores realizados.\n        setBookingData(prev => ({\n            ...prev,\n            rooms: updateRooms\n        }))\n    }\n    const getAges = (currentAges: string[], newChildrenCount: number):string[] => {\n        if (newChildrenCount > currentAges.length) {\n            return [...currentAges, ...Array(newChildrenCount - currentAges.length).fill(\"\")];\n        } else if (newChildrenCount < currentAges.length) {\n            return currentAges.slice(0, newChildrenCount);\n        }\n        return currentAges;\n    }\n    const handleDeleteRoom = (index: number) => {\n        setBookingData(prev => {\n            const updateRooms = new Map(prev.rooms);\n            updateRooms.delete(index);\n            return {\n                ...prev,\n                rooms: updateRooms\n            }\n        })\n    }\n    const handleGuestCountChange = (field: field, index: number, value: number) => {\n        setBookingData(prev => {\n            const updateRooms = new Map(prev.rooms);\n            const GuestUpdate = updateRooms.get(index);\n            if (GuestUpdate) {\n                if (field === 'adultCount') {\n                    GuestUpdate.adultCount = value;\n                } else if (field === 'childCount') {\n                    GuestUpdate.child.childCount = value\n                }\n                updateRooms.set(index, GuestUpdate);\n                return {\n                    ...prev,\n                    rooms: updateRooms\n                }\n            }\n            return prev;\n\n        });\n    }\n    const handleAgeByIndex = (roomIndex: number, ChildAgeIndex: number, value: string) => {\n        const roomsUpdate = new Map(bookingData.rooms);\n        const roomToUpdate = roomsUpdate.get(roomIndex);\n        if (roomToUpdate) {\n            roomToUpdate.child.ages[ChildAgeIndex] = value;\n        }\n        setBookingData({\n            ...bookingData,\n            rooms: roomsUpdate\n        })\n    }\n    const updateAgesLenght = (index: number, newLength: number) => {\n        const updateRooms = new Map(bookingData.rooms);\n        const room = updateRooms.get(index);\n        if (room) {\n            room.child.ages = Array(newLength).fill(\"Selected Child Age\");\n            updateRooms.set(index, room);\n            setBookingData({ ...bookingData, rooms: updateRooms });\n        }\n    }\n    const handleAgesChange = (roomIndex: number, newAges: string[]) => {\n        const updateRooms = new Map(bookingData.rooms);\n        const room = updateRooms.get(roomIndex);\n        if (room) {\n            room.child.ages = newAges;\n            updateRooms.set(roomIndex, room);\n            setBookingData({ ...bookingData, rooms: updateRooms })\n        }\n    }\n    return (\n        <BookingContext.Provider\n            value={{\n                bookingData, setBookingData, handleAddNewRoom, handleDeleteRoom, handleGuestCountChange,\n                handleAgesChange, updateAgesLenght, handleAgeByIndex, getAges\n            }}\n        >\n            {children}\n        </BookingContext.Provider>\n    );\n};\nexport const useBookingContext = () => {\n    const context = useContext(BookingContext);\n    if (context === undefined) {\n        throw new Error('useBookingContext must be used within a BookingProvider');\n    }\n    return context;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}