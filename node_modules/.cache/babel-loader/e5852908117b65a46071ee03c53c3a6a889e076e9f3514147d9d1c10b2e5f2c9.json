{"ast":null,"code":"var _jsxFileName = \"/Users/ismaelnvo/Desktop/hotelReservation/hotel-reservation/src/components/ContexApplication.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// const CheckFrequency = (numbers: number[]): Map<number, number> => {\n//     return numbers.reduce((freq, value) => {\n//         freq.set(value, (freq.get(value) || 0) + 1);\n//         return freq;\n//     }, new Map<number, number>());\n// }\n\nconst BookingContext = /*#__PURE__*/createContext(undefined);\n\n// Provider for the context\nexport const BookingProvider = ({\n  children\n}) => {\n  _s();\n  const initialRoom = new Map();\n  initialRoom.set(1, {\n    adultCount: 1,\n    child: {\n      childCount: 0,\n      ages: []\n    }\n  });\n  const [bookingData, setBookingData] = useState({\n    date: {\n      checkIn: new Date(),\n      checkOut: new Date()\n    },\n    rooms: {\n      \"Room 1\": initialRoom\n    },\n    guest: {\n      name: '',\n      lastName: '',\n      email: '',\n      phone: ''\n    }\n  });\n  const handleAddNewRoom = () => {\n    const newRoom = {\n      adultCount: 1,\n      child: {\n        childCount: 0,\n        ages: []\n      }\n    };\n    const newRoomMap = new Map();\n    newRoomMap.set(bookingData.rooms[\"Room 1\"].size + 1, newRoom);\n    const newRoomKey = `Room ${Object.keys(bookingData.rooms).length + 1}`;\n    setBookingData(prev => ({\n      ...prev,\n      rooms: {\n        ...prev.rooms,\n        [newRoomKey]: newRoomMap\n      }\n    }));\n  };\n  const getAges = (currentAges, newChildrenCount) => {\n    if (newChildrenCount > currentAges.length) {\n      return [...currentAges, ...Array(newChildrenCount - currentAges.length).fill(\"\")];\n    } else if (newChildrenCount < currentAges.length) {\n      return currentAges.slice(0, newChildrenCount);\n    }\n    return currentAges;\n  };\n  const handleDeleteRoom = index => {\n    setBookingData(prev => {\n      const updatedRooms = {\n        ...prev.rooms\n      };\n      const roomKey = `Room ${index}`;\n      delete updatedRooms[roomKey];\n      return {\n        ...prev,\n        rooms: updatedRooms\n      };\n    });\n  };\n  const handleDateUpdate = (field, e) => {\n    const newDate = new Date(e.target.value);\n    setBookingData(prev => ({\n      ...prev,\n      date: {\n        ...prev.date,\n        [field]: newDate\n      }\n    }));\n  };\n  const handleGuestCountChange = (field, index, value) => {\n    setBookingData(prev => {\n      const updatedRooms = {\n        ...prev.rooms\n      };\n      const roomKey = `Room ${index}`;\n      const room = updatedRooms[roomKey].get(index);\n      if (room) {\n        if (field === 'adultCount') {\n          room.adultCount = value;\n        } else if (field === 'childCount') {\n          room.child.childCount = value;\n        }\n        updatedRooms[roomKey].set(index, room);\n        return {\n          ...prev,\n          rooms: updatedRooms\n        };\n      }\n      return prev;\n    });\n  };\n  const checkAges = () => {\n    for (const [_, roomMap] of Object.entries(bookingData.rooms)) {\n      for (const [_, room] of Array.from(roomMap.entries())) {\n        let index = 0;\n        for (const value of room.child.ages) {\n          if (value === \"\" || value === `--Select child ${index + 1} Age--`) {\n            return false;\n          }\n          index++;\n        }\n      }\n    }\n    return true;\n  };\n  const handleNextClick = () => {\n    const isValid = checkAges();\n    if (!isValid) {\n      alert(\"Please ensure all child ages are selected.\");\n    }\n  };\n  const handleAgeByIndex = (roomIndex, value) => {\n    const updatedRooms = {\n      ...bookingData.rooms\n    };\n    const roomKey = `Room ${roomIndex}`;\n    const roomMap = updatedRooms[roomKey];\n    const room = roomMap.get(roomIndex);\n    if (room) {\n      room.child.ages = value;\n      roomMap.set(roomIndex, room);\n    }\n    return roomMap;\n  };\n  const updateAgesLength = (index, newLength) => {\n    const updatedRooms = {\n      ...bookingData.rooms\n    };\n    const roomKey = `Room ${index}`;\n    const roomMap = updatedRooms[roomKey];\n    const room = roomMap.get(index);\n    if (room) {\n      room.child.ages = Array(newLength).fill(\" \");\n      roomMap.set(index, room);\n      updatedRooms[roomKey] = roomMap;\n      setBookingData({\n        ...bookingData,\n        rooms: updatedRooms\n      });\n    }\n  };\n  const handleAgesChange = (roomIndex, newAges) => {\n    const updatedRooms = {\n      ...bookingData.rooms\n    };\n    const roomKey = `Room ${roomIndex}`;\n    const roomMap = updatedRooms[roomKey];\n    const room = roomMap.get(roomIndex);\n    if (room) {\n      room.child.ages = newAges;\n      roomMap.set(roomIndex, room);\n      updatedRooms[roomKey] = roomMap;\n      setBookingData({\n        ...bookingData,\n        rooms: updatedRooms\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(BookingContext.Provider, {\n    value: {\n      bookingData,\n      setBookingData,\n      handleAddNewRoom,\n      handleDeleteRoom,\n      handleGuestCountChange,\n      handleAgesChange,\n      updateAgesLength,\n      handleAgeByIndex,\n      handleDateUpdate,\n      handleNextClick,\n      getAges\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 9\n  }, this);\n};\n_s(BookingProvider, \"hBfpu8jhB0yhyCb2xd3ZrAgQTig=\");\n_c = BookingProvider;\nexport const useBookingContext = () => {\n  _s2();\n  const context = useContext(BookingContext);\n  if (context === undefined) {\n    throw new Error('useBookingContext must be used within a BookingProvider');\n  }\n  return context;\n};\n_s2(useBookingContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"BookingProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","BookingContext","undefined","BookingProvider","children","_s","initialRoom","Map","set","adultCount","child","childCount","ages","bookingData","setBookingData","date","checkIn","Date","checkOut","rooms","guest","name","lastName","email","phone","handleAddNewRoom","newRoom","newRoomMap","size","newRoomKey","Object","keys","length","prev","getAges","currentAges","newChildrenCount","Array","fill","slice","handleDeleteRoom","index","updatedRooms","roomKey","handleDateUpdate","field","e","newDate","target","value","handleGuestCountChange","room","get","checkAges","_","roomMap","entries","from","handleNextClick","isValid","alert","handleAgeByIndex","roomIndex","updateAgesLength","newLength","handleAgesChange","newAges","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useBookingContext","_s2","context","Error","$RefreshReg$"],"sources":["/Users/ismaelnvo/Desktop/hotelReservation/hotel-reservation/src/components/ContexApplication.tsx"],"sourcesContent":["import React, { createContext, useState, useContext } from \"react\";\nimport { resevationData } from \"../interfaces/ReservationData\";\nimport { Room } from \"../interfaces/Room\";\nimport { date } from \"../interfaces/BookedDate\";\n\ntype Field = \"adultCount\" | \"childCount\";\n\ninterface BookingContextProps {\n    bookingData: resevationData;\n    setBookingData: React.Dispatch<React.SetStateAction<resevationData>>;\n    handleAddNewRoom: () => void;\n    handleDeleteRoom: (index: number) => void;\n    handleGuestCountChange: (field: Field, index: number, value: number) => void;\n    handleAgesChange: (roomIndex: number, newAges: string[]) => void;\n    updateAgesLength: (index: number, newLength: number) => void;\n    handleAgeByIndex: (roomIndex: number, value: string[]) => Map<number, Room>;\n    getAges: (currentAges: string[], newChildrenCount: number) => string[];\n    handleDateUpdate: (field: keyof date, e: React.ChangeEvent<HTMLInputElement>) => void;\n    handleNextClick: () => void;\n}\n\ninterface BookingProviderProps {\n    children: React.ReactNode;\n}\n\n// const CheckFrequency = (numbers: number[]): Map<number, number> => {\n//     return numbers.reduce((freq, value) => {\n//         freq.set(value, (freq.get(value) || 0) + 1);\n//         return freq;\n//     }, new Map<number, number>());\n// }\n\nconst BookingContext = createContext<BookingContextProps | undefined>(undefined);\n\n// Provider for the context\nexport const BookingProvider: React.FC<BookingProviderProps> = ({ children }) => {\n    const initialRoom = new Map<number, Room>();\n    initialRoom.set(1, { adultCount: 1, child: { childCount: 0, ages: [] } });\n    const [bookingData, setBookingData] = useState<resevationData>({\n        date:  { checkIn: new Date(), checkOut: new Date() },\n        rooms: { \"Room 1\": initialRoom },\n        guest: { name: '', lastName: '', email: '', phone: '' }\n    });\n\n    const handleAddNewRoom = () => {\n        const newRoom: Room = {\n            adultCount: 1,\n            child: { childCount: 0, ages: [] }\n        };\n        const newRoomMap = new Map<number, Room>();\n        newRoomMap.set(bookingData.rooms[\"Room 1\"].size + 1, newRoom);\n        const newRoomKey = `Room ${Object.keys(bookingData.rooms).length + 1}`;\n        setBookingData(prev => ({\n            ...prev,\n            rooms: {\n                ...prev.rooms,\n                [newRoomKey]: newRoomMap\n            }\n        }));\n    }\n\n    const getAges = (currentAges: string[], newChildrenCount: number): string[] => {\n        if (newChildrenCount > currentAges.length) {\n            return [...currentAges, ...Array(newChildrenCount - currentAges.length).fill(\"\")];\n        } else if (newChildrenCount < currentAges.length) {\n            return currentAges.slice(0, newChildrenCount);\n        }\n        return currentAges;\n    }\n\n    const handleDeleteRoom = (index: number) => {\n        setBookingData(prev => {\n            const updatedRooms = { ...prev.rooms };\n            const roomKey = `Room ${index}`;\n            delete updatedRooms[roomKey];\n            return {\n                ...prev,\n                rooms: updatedRooms\n            };\n        });\n    }\n\n    const handleDateUpdate = (field: keyof date, e: React.ChangeEvent<HTMLInputElement>) => {\n        const newDate = new Date(e.target.value);\n        setBookingData(prev => ({\n            ...prev,\n            date: {\n                ...prev.date,\n                [field]: newDate,\n            },\n        }));\n    };\n\n    const handleGuestCountChange = (field: Field, index: number, value: number) => {\n        setBookingData(prev => {\n            const updatedRooms = { ...prev.rooms };\n            const roomKey = `Room ${index}`;\n            const room = updatedRooms[roomKey].get(index);\n            if (room) {\n                if (field === 'adultCount') {\n                    room.adultCount = value;\n                } else if (field === 'childCount') {\n                    room.child.childCount = value;\n                }\n                updatedRooms[roomKey].set(index, room);\n                return {\n                    ...prev,\n                    rooms: updatedRooms\n                };\n            }\n            return prev;\n        });\n    }\n\n    const checkAges = (): boolean => {\n        for (const [_, roomMap] of Object.entries(bookingData.rooms)) {\n            for (const [_, room] of Array.from(roomMap.entries())) {\n                let index = 0;\n                for (const value of room.child.ages) {\n                    if (value === \"\" || value === `--Select child ${index + 1} Age--`) {\n                        return false;\n                    }\n                    index++;\n                }\n            }\n        }\n        return true;\n    };\n\n    const handleNextClick = () => {\n        const isValid = checkAges();\n        if (!isValid) {\n            alert(\"Please ensure all child ages are selected.\");\n        }\n    }\n\n    const handleAgeByIndex = (roomIndex: number, value: string[]): Map<number, Room> => {\n        const updatedRooms = { ...bookingData.rooms };\n        const roomKey = `Room ${roomIndex}`;\n        const roomMap = updatedRooms[roomKey];\n        const room = roomMap.get(roomIndex);\n        if (room) {\n            room.child.ages = value;\n            roomMap.set(roomIndex, room);\n        }\n        return roomMap;\n    };\n\n    const updateAgesLength = (index: number, newLength: number) => {\n        const updatedRooms = { ...bookingData.rooms };\n        const roomKey = `Room ${index}`;\n        const roomMap = updatedRooms[roomKey];\n        const room = roomMap.get(index);\n        if (room) {\n            room.child.ages = Array(newLength).fill(\" \");\n            roomMap.set(index, room);\n            updatedRooms[roomKey] = roomMap;\n            setBookingData({ ...bookingData, rooms: updatedRooms });\n        }\n    }\n\n    const handleAgesChange = (roomIndex: number, newAges: string[]) => {\n        const updatedRooms = { ...bookingData.rooms };\n        const roomKey = `Room ${roomIndex}`;\n        const roomMap = updatedRooms[roomKey];\n        const room = roomMap.get(roomIndex);\n        if (room) {\n            room.child.ages = newAges;\n            roomMap.set(roomIndex, room);\n            updatedRooms[roomKey] = roomMap;\n            setBookingData({ ...bookingData, rooms: updatedRooms });\n        }\n    }\n\n    return (\n        <BookingContext.Provider\n            value={{\n                bookingData, setBookingData, handleAddNewRoom, handleDeleteRoom, handleGuestCountChange,\n                handleAgesChange, updateAgesLength, handleAgeByIndex, handleDateUpdate, handleNextClick, getAges\n            }}\n        >\n            {children}\n        </BookingContext.Provider>\n    );\n};\n\nexport const useBookingContext = () => {\n    const context = useContext(BookingContext);\n    if (context === undefined) {\n        throw new Error('useBookingContext must be used within a BookingProvider');\n    }\n    return context;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}