{"ast":null,"code":"var _jsxFileName = \"/Users/ismaelnvo/Desktop/hotelReservation/hotel-reservation/src/components/ContexApplication.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\nconst CheckFrecuency = numbers => {\n  return numbers.reduce((freq, value) => {\n    freq.set(value, (freq.get(value) || 0) + 1);\n    return freq;\n  }, new Map());\n};\n_c = CheckFrecuency;\nconst BookingContext = /*#__PURE__*/createContext(undefined);\n//Proveedor del contexto \nexport const BookingProvider = ({\n  children\n}) => {\n  _s();\n  const inicialRoom = new Map();\n  inicialRoom.set(1, {\n    adultCount: 1,\n    child: {\n      childCount: 0,\n      ages: []\n    }\n  });\n  const [bookingData, setBookingData] = useState({\n    date: {\n      checkIn: new Date(),\n      checkOut: new Date()\n    },\n    rooms: inicialRoom,\n    guest: {\n      name: '',\n      lastName: '',\n      email: '',\n      phone: ''\n    }\n  });\n  const handleAddNewRoom = () => {\n    //creamos un objeto con el identificador newRom de interface room, le asignamos sus correspondientes valores\n    const newRoom = {\n      adultCount: 1,\n      child: {\n        childCount: 0,\n        ages: []\n      }\n    };\n    //Hacemos una copia del estado anterior de rooms\n    const updateRooms = new Map(bookingData.rooms);\n    // Incertamos new room que acabamos de crear, con el parametro number igual al \n    // estado rooms anterior le asignamos el valor rooms.size()\n    updateRooms.set(bookingData.rooms.size + 1, newRoom);\n    //Llamamos la funcion actuaciona, hacemos una copia del estado anterior, y modificamos el estado anterior de rooms\n    //con los cambios anteriores realizados.\n    setBookingData(prev => ({\n      ...prev,\n      rooms: updateRooms\n    }));\n  };\n  const getAges = (currentAges, newChildrenCount) => {\n    if (newChildrenCount > currentAges.length) {\n      return [...currentAges, ...Array(newChildrenCount - currentAges.length).fill(\"\")];\n    } else if (newChildrenCount < currentAges.length) {\n      return currentAges.slice(0, newChildrenCount);\n    }\n    return currentAges;\n  };\n  const handleDeleteRoom = index => {\n    setBookingData(prev => {\n      const updateRooms = new Map(prev.rooms);\n      updateRooms.delete(index); // room siempre es true ya que el botton delete siempre se mostrara cu\n      return {\n        ...prev,\n        rooms: updateRooms\n      };\n    });\n  };\n  const handleDateUpdate = (field, e) => {\n    const newDate = new Date(e.target.value);\n    setBookingData(prev => ({\n      ...prev,\n      date: {\n        ...prev.date,\n        [field]: newDate\n      }\n    }));\n  };\n  const handleGuestCountChange = (field, index, value) => {\n    setBookingData(prev => {\n      const updateRooms = new Map(prev.rooms);\n      const GuestUpdate = updateRooms.get(index);\n      if (GuestUpdate) {\n        if (field === 'adultCount') {\n          GuestUpdate.adultCount = value;\n        } else if (field === 'childCount') {\n          GuestUpdate.child.childCount = value;\n        }\n        updateRooms.set(index, GuestUpdate);\n        return {\n          ...prev,\n          rooms: updateRooms\n        };\n      }\n      return prev;\n    });\n  };\n  const checkAges = () => {\n    for (const [_, room] of Array.from(bookingData.rooms.entries())) {\n      let index = 0;\n      for (const value of room.child.ages) {\n        if (value === \"\" || value === `--Select child ${index + 1} Age--`) {\n          return false;\n        }\n        index++;\n      }\n    }\n    return true;\n  };\n  const handleNextClick = () => {\n    const isValid = checkAges();\n    if (!isValid) {\n      alert(\"Please ensure all child ages are selected.\");\n    }\n  };\n  const handleAgeByIndex = (roomIndex, value) => {\n    const roomsUpdate = new Map(bookingData.rooms);\n    const roomToUpdate = roomsUpdate.get(roomIndex);\n    if (roomToUpdate) {\n      roomToUpdate.child.ages = value;\n    }\n    return roomsUpdate;\n  };\n  const updateAgesLenght = (index, newLength) => {\n    const updateRooms = new Map(bookingData.rooms);\n    const room = updateRooms.get(index);\n    if (room) {\n      room.child.ages = Array(newLength).fill(\" \");\n      updateRooms.set(index, room);\n      setBookingData({\n        ...bookingData,\n        rooms: updateRooms\n      });\n    }\n  };\n  const handleAgesChange = (roomIndex, newAges) => {\n    const updateRooms = new Map(bookingData.rooms);\n    const room = updateRooms.get(roomIndex);\n    if (room) {\n      room.child.ages = newAges;\n      updateRooms.set(roomIndex, room);\n      setBookingData({\n        ...bookingData,\n        rooms: updateRooms\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(BookingContext.Provider, {\n    value: {\n      bookingData,\n      setBookingData,\n      handleAddNewRoom,\n      handleDeleteRoom,\n      handleGuestCountChange,\n      handleAgesChange,\n      updateAgesLenght,\n      handleAgeByIndex,\n      handleDateUpdate,\n      handleNextClick,\n      getAges\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 9\n  }, this);\n};\n_s(BookingProvider, \"x+8R61I6HIMWxRaFunkRpgXTH3Y=\");\n_c2 = BookingProvider;\nexport const useBookingContext = () => {\n  _s2();\n  const context = useContext(BookingContext);\n  if (context === undefined) {\n    throw new Error('useBookingContext must be used within a BookingProvider');\n  }\n  return context;\n};\n_s2(useBookingContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c, _c2;\n$RefreshReg$(_c, \"CheckFrecuency\");\n$RefreshReg$(_c2, \"BookingProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","CheckFrecuency","numbers","reduce","freq","value","set","get","Map","_c","BookingContext","undefined","BookingProvider","children","_s","inicialRoom","adultCount","child","childCount","ages","bookingData","setBookingData","date","checkIn","Date","checkOut","rooms","guest","name","lastName","email","phone","handleAddNewRoom","newRoom","updateRooms","size","prev","getAges","currentAges","newChildrenCount","length","Array","fill","slice","handleDeleteRoom","index","delete","handleDateUpdate","field","e","newDate","target","handleGuestCountChange","GuestUpdate","checkAges","_","room","from","entries","handleNextClick","isValid","alert","handleAgeByIndex","roomIndex","roomsUpdate","roomToUpdate","updateAgesLenght","newLength","handleAgesChange","newAges","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c2","useBookingContext","_s2","context","Error","$RefreshReg$"],"sources":["/Users/ismaelnvo/Desktop/hotelReservation/hotel-reservation/src/components/ContexApplication.tsx"],"sourcesContent":["import React, { createContext, useState, useContext } from \"react\";\nimport { resevationData } from \"../interfaces/ReservationData\";\nimport { Room } from \"../interfaces/Room\";\nimport { date } from \"../interfaces/BookedDate\";\ntype field = \"adultCount\" | \"childCount\";\ninterface BookingContextProps {\n    bookingData: resevationData;\n    setBookingData: React.Dispatch<React.SetStateAction<resevationData>>;\n    handleAddNewRoom: () => void;\n    handleDeleteRoom: (index: number) => void;\n    handleGuestCountChange: (field: field, index: number, value: number) => void;\n    handleAgesChange: (roomIndex: number, newAges: string[]) => void;\n    updateAgesLenght: (index: number, newLength: number) => void;\n    handleAgeByIndex: (roomIndex: number, value: string[]) => Map<number, Room>;\n    getAges: (currentAges: string[], newChildrenCount: number) => string[];\n    handleDateUpdate: (field: keyof date, e: React.ChangeEvent<HTMLInputElement>) => void;\n    handleNextClick:()=>void;\n};\n\ninterface bookingProviderProps {\n    children: React.ReactNode;\n}\nconst CheckFrecuency = (numbers:number[]):Map<number, number>=>{\n    return numbers.reduce((freq, value)=>{\n        freq.set(value, (freq.get(value)|| 0 ) + 1);\n        return freq;\n    }, new Map<number,number>);  \n}\nconst BookingContext = createContext<BookingContextProps | undefined>(undefined);\n//Proveedor del contexto \nexport const BookingProvider: React.FC<bookingProviderProps> = ({ children }) => {\n    const inicialRoom = new Map<number, Room>();\n    inicialRoom.set(1, { adultCount: 1, child: { childCount: 0, ages: [] } });\n    const [bookingData, setBookingData] = useState<resevationData>({\n        date: { checkIn: new Date(), checkOut: new Date() },\n        rooms: inicialRoom,\n        guest: { name: '', lastName: '', email: '', phone: '' }\n    });\n    const handleAddNewRoom = () => {\n        //creamos un objeto con el identificador newRom de interface room, le asignamos sus correspondientes valores\n        const newRoom: Room = {\n            adultCount: 1,\n            child: { childCount: 0, ages: [] }\n        }\n        //Hacemos una copia del estado anterior de rooms\n        const updateRooms = new Map(bookingData.rooms);\n        // Incertamos new room que acabamos de crear, con el parametro number igual al \n        // estado rooms anterior le asignamos el valor rooms.size()\n        updateRooms.set(bookingData.rooms.size + 1, newRoom);\n        //Llamamos la funcion actuaciona, hacemos una copia del estado anterior, y modificamos el estado anterior de rooms\n        //con los cambios anteriores realizados.\n        setBookingData(prev => ({\n            ...prev,\n            rooms: updateRooms\n        }))\n    }\n    const getAges = (currentAges: string[], newChildrenCount: number): string[] => {\n        if (newChildrenCount > currentAges.length) {\n            return [...currentAges, ...Array(newChildrenCount - currentAges.length).fill(\"\")];\n        } else if (newChildrenCount < currentAges.length) {\n            return currentAges.slice(0, newChildrenCount);\n        }\n        return currentAges;\n    }\n    const handleDeleteRoom = (index: number) => {\n        setBookingData(prev => {\n            const updateRooms = new Map(prev.rooms);\n            updateRooms.delete(index); // room siempre es true ya que el botton delete siempre se mostrara cu\n            return {\n                ...prev,\n                rooms: updateRooms\n            }\n        })\n    }\n    const handleDateUpdate = (field: keyof date, e: React.ChangeEvent<HTMLInputElement>) => {\n        const newDate = new Date(e.target.value);\n        setBookingData(prev => ({\n            ...prev,\n            date: {\n                ...prev.date,\n                [field]: newDate,\n            },\n        }));\n    };\n    const handleGuestCountChange = (field: field, index: number, value: number) => {\n        setBookingData(prev => {\n            const updateRooms = new Map(prev.rooms);\n            const GuestUpdate = updateRooms.get(index);\n            if (GuestUpdate) {\n                if (field === 'adultCount') {\n                    GuestUpdate.adultCount = value;\n                } else if (field === 'childCount') {\n                    GuestUpdate.child.childCount = value\n                }\n                updateRooms.set(index, GuestUpdate);\n                return {\n                    ...prev,\n                    rooms: updateRooms\n                }\n            }\n            return prev;\n\n        });\n    }\n    const checkAges = (): boolean => {\n        for (const [_, room] of Array.from(bookingData.rooms.entries())) {\n            let index = 0;\n            for (const value of room.child.ages) {\n                if (value === \"\" || value === `--Select child ${index + 1} Age--`) {\n                    return false;\n                }\n                index++;\n            }\n        }\n        return true;\n    };\n    const handleNextClick = () => {\n        const isValid = checkAges();\n        if (!isValid) {\n            alert(\"Please ensure all child ages are selected.\");\n        }\n    }\n    const handleAgeByIndex = (roomIndex: number, value: string[]): Map<number, Room> => {\n        const roomsUpdate: Map<number, Room> = new Map(bookingData.rooms);\n        const roomToUpdate = roomsUpdate.get(roomIndex);\n        if (roomToUpdate) {\n            roomToUpdate.child.ages = value;\n        }\n        return roomsUpdate;\n    };\n    const updateAgesLenght = (index: number, newLength: number) => {\n        const updateRooms = new Map(bookingData.rooms);\n        const room = updateRooms.get(index);\n        if (room) {\n            room.child.ages = Array(newLength).fill(\" \");\n            updateRooms.set(index, room);\n            setBookingData({ ...bookingData, rooms: updateRooms });\n        }\n    }\n    const handleAgesChange = (roomIndex: number, newAges: string[]) => {\n        const updateRooms = new Map(bookingData.rooms);\n        const room = updateRooms.get(roomIndex);\n        if (room) {\n            room.child.ages = newAges;\n            updateRooms.set(roomIndex, room);\n            setBookingData({ ...bookingData, rooms: updateRooms })\n        }\n    }\n    return (\n        <BookingContext.Provider\n            value={{\n                bookingData, setBookingData, handleAddNewRoom, handleDeleteRoom, handleGuestCountChange,\n                handleAgesChange, updateAgesLenght, handleAgeByIndex, handleDateUpdate,handleNextClick,getAges\n            }}\n        >\n            {children}\n        </BookingContext.Provider>\n    );\n};\nexport const useBookingContext = () => {\n    const context = useContext(BookingContext);\n    if (context === undefined) {\n        throw new Error('useBookingContext must be used within a BookingProvider');\n    }\n    return context;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}